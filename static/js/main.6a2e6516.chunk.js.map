{"version":3,"sources":["components/Player/Player.js","components/PlayersList/PlayersList.js","components/AddPlayer/AddPlayer.js","App.js","serviceWorker.js","index.js"],"names":["Player","props","react_default","a","createElement","className","name","score","onClick","onPlayerScoreChange","index_es","icon","onPlayerRemove","PlayersList","players","map","player","i","components_Player_Player","key","points","onScoreUpdate","AddPlayer","input","onSubmit","event","preventDefault","onPlayerAdd","value","type","placeholder","ref","node","library","add","faPlus","faMinus","faUserMinus","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","playerIndex","scoreChange","setState","state","index","objectSpread","playerName","alert","newPlayer","toConsumableArray","concat","filter","__","components_AddPlayer_AddPlayer","components_PlayersList_PlayersList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6a2e6516.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Player.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nconst Player = props => (\r\n  <li className=\"Player\">\r\n    <div className=\"Player__name\">{props.name}</div>\r\n    <div className=\"Player__score\">{props.score}</div>\r\n    <div className=\"Player__button\" onClick={() => props.onPlayerScoreChange(1)} ><FontAwesomeIcon icon=\"plus\" className=\"Icon\" /></div>\r\n    <div className=\"Player__button\" onClick={() => props.onPlayerScoreChange(-1)} ><FontAwesomeIcon icon=\"minus\" className=\"Icon\" /></div>\r\n    <div className=\"Player__button_Remove\" onClick={() => props.onPlayerRemove()} ><FontAwesomeIcon icon=\"user-minus\" className=\"Icon\" /></div>\r\n  </li>\r\n);\r\n\r\nexport default Player;","import React from 'react';\r\nimport Player from '../Player/Player';\r\nimport './PlayersList.css';\r\n\r\nconst PlayersList = (props) => (\r\n   <ul className=\"PlayersList\">\r\n       {props.players.map((player, i) => (\r\n           <Player\r\n               key={i}\r\n               name={player.name}\r\n               score={player.score}\r\n               onPlayerScoreChange={(points) => props.onScoreUpdate(i, points)}\r\n               onPlayerRemove={() => props.onPlayerRemove(i) }\r\n           />)\r\n       )}\r\n   </ul>\r\n);\r\n\r\nexport default PlayersList;","import React from 'react';\r\nimport './AddPlayer.css';\r\n\r\nconst AddPlayer = (props) => {\r\n  let input;\r\n  const onSubmit = (event) => {\r\n    event.preventDefault();\r\n    props.onPlayerAdd(input.value);\r\n    input.value = '';\r\n  }\r\n   return (\r\n       <form className=\"AddPlayer\" onSubmit={onSubmit}>\r\n           <input type=\"text\" placeholder=\"Write player name\" className=\"AddPlayer__input\" ref={(node) => input = node} />\r\n           <input type=\"submit\" className=\"AddPlayer__submit\" value=\"Add Player\" />\r\n       </form>\r\n   )\r\n};\r\n\r\nexport default AddPlayer;","import React, { Component } from 'react';\nimport './App.css';\nimport PlayersList from './components/PlayersList/PlayersList';\nimport AddPlayer from './components/AddPlayer/AddPlayer';\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faPlus, faMinus, faUserMinus } from '@fortawesome/free-solid-svg-icons';\n\nlibrary.add(faPlus, faMinus, faUserMinus);\n\nclass App extends Component {\n constructor() {\n   super();\n\n   this.state = {\n     players: []\n   }\n }\n\n onScoreUpdate = (playerIndex, scoreChange) => {\n  this.setState({\n    players: this.state.players.map((player, index) => {\n      if (index === playerIndex) {\n        return { ...player, score: player.score + scoreChange }; // object spread operator\n      }\n      return player;\n    })\n  })\n}\n\nonPlayerAdd = (playerName) => {\n  if (playerName === ''){\n    alert('Write player name');\n  } else {\n    const newPlayer = {\n      name: playerName,\n      score: 0,\n    }\n    this.setState({\n      players: [...this.state.players, newPlayer]\n    });\n  }\n}\n\nonPlayerRemove = (playerIndex) => {\n  this.setState({\n    players: this.state.players.filter((__, index) => index !== playerIndex)\n  });\n}\n\n render() {\n   return (\n     <div className=\"App\">\n      <AddPlayer\n        onPlayerAdd={this.onPlayerAdd}\n      />\n      <PlayersList\n        players={this.state.players}\n        onScoreUpdate={this.onScoreUpdate}\n        onPlayerRemove={this.onPlayerRemove}\n      />\n     </div>\n   );\n }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}